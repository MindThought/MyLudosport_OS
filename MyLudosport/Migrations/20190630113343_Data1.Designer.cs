// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyLudosport.Data;

namespace MyLudosport.Migrations
{
    [DbContext(typeof(MyLudosportContext))]
    [Migration("20190630113343_Data1")]
    partial class Data1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Id");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.HasKey("UserName");

                    b.ToTable("IdentityUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("IdentityUserClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");
                });

            modelBuilder.Entity("MyLudosport.Models.Academy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeanId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DeanId");

                    b.ToTable("Academies");
                });

            modelBuilder.Entity("MyLudosport.Models.Athlete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountId");

                    b.Property<string>("BattleName");

                    b.Property<Guid?>("ClanId");

                    b.Property<int?>("CourseY");

                    b.Property<int?>("Form1");

                    b.Property<int?>("Form2");

                    b.Property<int?>("Form3");

                    b.Property<int?>("Form4");

                    b.Property<int?>("Form5");

                    b.Property<int?>("Form6");

                    b.Property<int?>("Form7");

                    b.Property<int?>("Form8");

                    b.Property<int?>("Form9");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("ClanId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("MyLudosport.Models.AthleteAcademyRelation", b =>
                {
                    b.Property<Guid>("AthleteId");

                    b.Property<Guid>("AcademyId");

                    b.HasKey("AthleteId", "AcademyId");

                    b.HasAlternateKey("AcademyId", "AthleteId");

                    b.ToTable("AthleteAcademyRelation");
                });

            modelBuilder.Entity("MyLudosport.Models.AthleteClanRelation", b =>
                {
                    b.Property<Guid>("AthleteId");

                    b.Property<Guid>("ClanId");

                    b.HasKey("AthleteId", "ClanId");

                    b.HasIndex("ClanId");

                    b.ToTable("AthleteClanRelation");
                });

            modelBuilder.Entity("MyLudosport.Models.AthleteDuelRelations", b =>
                {
                    b.Property<Guid>("AthleteId");

                    b.Property<Guid>("DuelId");

                    b.Property<int>("Challenger");

                    b.HasKey("AthleteId", "DuelId");

                    b.HasIndex("DuelId");

                    b.ToTable("AthleteDuelRelations");
                });

            modelBuilder.Entity("MyLudosport.Models.AthleteSchoolRelation", b =>
                {
                    b.Property<Guid>("AthleteId");

                    b.Property<Guid>("SchoolId");

                    b.HasKey("AthleteId", "SchoolId");

                    b.HasIndex("SchoolId");

                    b.ToTable("AthleteSchoolRelation");
                });

            modelBuilder.Entity("MyLudosport.Models.Clan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("MyLudosport.Models.Duel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChallengeTime");

                    b.Property<int>("DuelResult");

                    b.Property<int>("DuelStatus");

                    b.Property<DateTime>("ReportTime");

                    b.Property<int>("Reporter");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Duels");
                });

            modelBuilder.Entity("MyLudosport.Models.Judge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountId");

                    b.Property<int>("Level");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Judges");
                });

            modelBuilder.Entity("MyLudosport.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AcademyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("MyLudosport.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<Guid?>("AcademyId");

                    b.Property<Guid?>("ClanId");

                    b.Property<string>("FamilyName");

                    b.Property<string>("PersonalName");

                    b.Property<Guid?>("SchoolId");

                    b.HasIndex("AcademyId");

                    b.HasIndex("ClanId");

                    b.HasIndex("SchoolId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("MyLudosport.Models.Academy", b =>
                {
                    b.HasOne("MyLudosport.Models.Athlete", "Dean")
                        .WithMany()
                        .HasForeignKey("DeanId");
                });

            modelBuilder.Entity("MyLudosport.Models.Athlete", b =>
                {
                    b.HasOne("MyLudosport.Models.ApplicationUser", "Account")
                        .WithOne("Athlete")
                        .HasForeignKey("MyLudosport.Models.Athlete", "AccountId");

                    b.HasOne("MyLudosport.Models.Clan")
                        .WithMany("Instructors")
                        .HasForeignKey("ClanId");
                });

            modelBuilder.Entity("MyLudosport.Models.AthleteAcademyRelation", b =>
                {
                    b.HasOne("MyLudosport.Models.Academy", "Academy")
                        .WithMany("AthleteRelations")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyLudosport.Models.Athlete", "Athlete")
                        .WithMany("AcademyRelations")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyLudosport.Models.AthleteClanRelation", b =>
                {
                    b.HasOne("MyLudosport.Models.Athlete", "Athlete")
                        .WithMany("ClanRelations")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyLudosport.Models.Clan", "Clan")
                        .WithMany("Students")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyLudosport.Models.AthleteDuelRelations", b =>
                {
                    b.HasOne("MyLudosport.Models.Athlete", "Athlete")
                        .WithMany("DuelRelations")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyLudosport.Models.Duel", "Duel")
                        .WithMany("DuelRelations")
                        .HasForeignKey("DuelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyLudosport.Models.AthleteSchoolRelation", b =>
                {
                    b.HasOne("MyLudosport.Models.Athlete", "Athlete")
                        .WithMany("SchoolRelations")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyLudosport.Models.School", "School")
                        .WithMany("AthleteRelations")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyLudosport.Models.Clan", b =>
                {
                    b.HasOne("MyLudosport.Models.School", "School")
                        .WithMany("Clans")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("MyLudosport.Models.Judge", b =>
                {
                    b.HasOne("MyLudosport.Models.ApplicationUser", "Account")
                        .WithOne("Judge")
                        .HasForeignKey("MyLudosport.Models.Judge", "AccountId");
                });

            modelBuilder.Entity("MyLudosport.Models.School", b =>
                {
                    b.HasOne("MyLudosport.Models.Academy", "Academy")
                        .WithMany("Schools")
                        .HasForeignKey("AcademyId");
                });

            modelBuilder.Entity("MyLudosport.Models.ApplicationUser", b =>
                {
                    b.HasOne("MyLudosport.Models.Academy")
                        .WithMany("Admins")
                        .HasForeignKey("AcademyId");

                    b.HasOne("MyLudosport.Models.Clan")
                        .WithMany("Admins")
                        .HasForeignKey("ClanId");

                    b.HasOne("MyLudosport.Models.School")
                        .WithMany("Admins")
                        .HasForeignKey("SchoolId");
                });
#pragma warning restore 612, 618
        }
    }
}
